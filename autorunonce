#!/bin/bash

# ----- BASIC CONFIGURATIONS: -----

# Sets hostname to a desirable name
# (default: treehouses)
hostname='treehouses'

# If "button", bluetooth is enabled unless GPIO 18 is pulled to ground
# If "normal", bluetooth is always on.
# (default: button)
bluetooth="button"

# If true, this allows trusted treehouses team members to log on to the system without a password
# It will search for key pairs or authorized_key files directly in /boot folder to incorporate in the ssh server
# (default: true)
treehousesteamsshkeys="true"
addauthorizedkey=""


# ----- INTERNET CONFIGURATIONS: -----

# Options for connectiontype:
#   "ethernet" connects to ethernet only
#   "wifi" connects to an existing router
#   "apinternet" turns the raspberry pi into a hotspot with internet connection
#   "aplocal" turns the raspberry pi into a hotspot without internet connection
#   "bridge" connects to an existing router, creates a raspberry pi hotspot and bridges these two connections.
connectiontype="apinternet"

# wifiname: Insert the name (SSID) of your wifi router
# wifipassword: Insert the password of your wifi router. Leave field empty for open networks
# (Edit if "connectiontype" is "wifi" or "bridge")
wifiname=''
wifipassword=''

# hotspotname: Change to the name you want your hotspot to have, raspberry pi will be a hotspot with this name as SSID
# hotspotpassword:
#   Insert the password you want your Raspberry Pi hotspot to have. Can be blank for no password (open network)
#   Passwords must be 8 characters or more. If your password has less, it will be configured as open network
# (Edit if "connectiontype" is "apinternet", "aplocal" or "bridge")
hotspotname='treehouses'
hotspotpassword=''


# ----- OTHER CONFIGURATION: -----

# startvnc: If true, it starts vnc and gui (default: false)
startvnc="false"

# starttor: If true, it starts a tor hidden service (default: false)
# starttornotice: If true, publishes these addresses to treehouses gitter or "tornoticeurl" (default: false)
starttor="false"
starttornotice="false"
tornoticeapiurl=""

# startplanet: If true, this starts the docker service (default: true)
# updateplanet: If true, this updates the planet to the latest revision (default: false)
startplanet="true"
updateplanet="false"

# enablecoralboard: If true, this enables the use of the Coral Enviro board. (default: false)
# startcoralenvirodemo: If true, this starts the demo on Coral Enviro board. (default: false)
enablecoralenviroboard="false"
startcoralenvirodemo="false"


# pwnagotchi configuration
# start pwnagotchi: If true, starts the pwnagotchi services to attack wi-fi networks
# pwndisplay: type of dipslay for pwnagotchi to use [none, waveshare_2, waveshare_1, waveshare27inch, waveshare154inch,
# inky, papirus, oledhat, dfrobot] (default = waveshare_2)
# pwncolor: color of your display [black, blue, red, yellow] (default = black)
# pwnreport: determines what will report to pwnagotchi servers (not related to treehouses)
# [none, partial, full] (default = none)
# wifiname: Add any network you don't want pwnagotchi to attack
# Attention: When pwnagotchi is enabled, the wifi will not be available to connect to a router and therefore only "ethernet"
# network configuration will be enabled
wifiname=''
startpwnagotchi="false"
pwndisplay="waveshare_2"
pwncolor="black"
pwnreport="none"

# No need to edit below this line
#----------------------------------------------------------------------------------------------------#

# sets the desired hostname for your raspberry pi
treehouses rename $hostname

# expands the filesystem
treehouses expandfs

# configures the wifi antenna of the raspberry pi
if [ ${#hotspotpassword} -lt 8 ]; then hotspotpassword=''; fi; # no password if the password is < 8 characters long
case $connectiontype in
  "ethernet")
    ;;
  "wifi")
    treehouses wifi $wifiname $wifipassword;;
  "apinternet")
    treehouses ap internet $hotspotname $hotspotpassword;;
  "aplocal")
    treehouses ap local $hotspotname $hotspotpassword;;
  "bridge")
    treehouses bridge $wifiname $hotspotname $wifipassword $hotspotpassword;;
  *)
    echo "Unsupported configuration. Switching to default ap internet config";
    treehouses ap internet treehouses;;
esac

# disables button for bluetooth if Coral Env board is present, or constant bluetooth is selected
if [ $bluetooth = "button" ] && [ $enablecoralenviroboard = "false" ]; then
  treehouses button bluetooth
else 
  treehouses bluetooth on
fi

# starts vnc and gui services
if [ $startvnc = "true" ]; then
  treehouses vnc on
fi

# starts tor service
if [ $starttor = "true" ]; then
  treehouses tor add 22
  if [ $startplanet = "true" ]; then
    treehouses tor add 80
    treehouses tor add 2200
  fi
  sleep 10
  sync
  if [ $starttornotice = "true" ]; then
    if [ ${#tornoticeapiurl} -ge 0 ]; then
      treehouses tor notice delete
      treehouses tor notice add $tornoticeapiurl
    fi
    treehouses tor notice on
  fi
  sync
  sleep 10
fi

# Configures pwnagotchi
# Creates services if pwnagotchi is enabled
if [ $startpwnagotchi = "true" ]; then
   # Create bettercap service
   cat <<EOFA > /etc/systemd/system/bettercap.service
   [Unit]
   Description=bettercap api.rest service.
   Documentation=https://bettercap.org
   Wants=network.target
   After=pwngrid.service

   [Service]
   Type=simple
   PermissionsStartOnly=true
   ExecStart=/usr/bin/bettercap-launcher
   Restart=always
   RestartSec=30

   [Install]
   WantedBy=multi-user.target
   EOFA

   # Create bettercap launcher
   cat <<EOFB > /usr/bin/bettercap-launcher
   #!/usr/bin/env bash
   /usr/bin/monstart
   if [[ $(ifconfig | grep usb0 | grep RUNNING) ]] || [[ $(cat /sys/class/net/eth0/carrier) ]]; then
     # if override file exists, go into auto mode
     if [ -f /root/.pwnagotchi-auto ]; then
       /usr/bin/bettercap -no-colors -caplet pwnagotchi-auto -iface mon0
     else
       /usr/bin/bettercap -no-colors -caplet pwnagotchi-manual -iface mon0
     fi
   else
     /usr/bin/bettercap -no-colors -caplet pwnagotchi-auto -iface mon0
   fi
   EOFB
   
   # Create pwngrid launcher
   cat <<EOFC > /etc/systemd/system/pwngrid-peer.service
   [Unit]
   Description=pwngrid peer service.
   Documentation=https://pwnagotchi.ai
   Wants=network.target

   [Service]
   Type=simple
   PermissionsStartOnly=true
   ExecStart=/usr/bin/pwngrid -keys /etc/pwnagotchi -address 127.0.0.1:8666 -client-token /root/.api-enrollment.json -wait -log /var/log/pwngrid-peer.log -iface mon0
   Restart=always
   RestartSec=30

   [Install]
   WantedBy=multi-user.target
   EOFC
fi
# Whitelists and excludes your home wifi network
sed 's/HomeNetwork/$wifiname/g' /boot/config.yml

# Configures the config.txt
grep -qxF 'dtoverlay=dwc2' /boot/config.txt || echo 'dtoverlay=dwc2' >> /boot/config.txt
grep -qxF 'dtoverlay=spi1-3cs' /boot/config.txt || echo 'dtoverlay=spi1-3cs' >> /boot/config.txt
grep -qxF 'dtparam=spi=on' /boot/config.txt || echo 'dtparam=spi=on' >> /boot/config.txt
grep -qxF 'dtparam=i2c_arm=on' /boot/config.txt || echo 'dtparam=i2c_arm=on' >> /boot/config.txt
grep -qxF 'dtparam=i2c1=on' /boot/config.txt || echo 'dtparam=i2c1=on' >> /boot/config.txt
grep -qxF 'gpu_mem=16' /boot/config.txt || echo 'gpu_mem=16' >> /boot/config.txt

# Selects the display type you have attached to your RPi
case $pwndisplay in
  "none")
    sed 's/displayenabled/false/g' /boot/config.yml;;
  "waveshare_2")
    sed 's/displayenabled/true/g' /boot/config.yml;;
    sed 's/displaytype/waveshare_2/g' /boot/config.yml;;
  "waveshare_1")
    sed 's/displayenabled/true/g' /boot/config.yml;;
    sed 's/displaytype/waveshare_1/g' /boot/config.yml;;
  "waveshare27inch")
    sed 's/displayenabled/true/g' /boot/config.yml;;
    sed 's/displaytype/waveshare27inch/g' /boot/config.yml;;
  "waveshare154inch")
    sed 's/displayenabled/true/g' /boot/config.yml;;
    sed 's/displaytype/waveshare154inch/g' /boot/config.yml;;
  "inky")
    sed 's/displayenabled/true/g' /boot/config.yml;;
    sed 's/displaytype/inky/g' /boot/config.yml;;
  "papirus")
    sed 's/displayenabled/true/g' /boot/config.yml;;
    sed 's/displaytype/papirus/g' /boot/config.yml;;
  "oledhat")
    sed 's/displayenabled/true/g' /boot/config.yml;;
    sed 's/displaytype/oledhat/g' /boot/config.yml;;
  "dfrobot")
    sed 's/displayenabled/true/g' /boot/config.yml;;
    sed 's/displaytype/dfrobot/g' /boot/config.yml;;
  *)
    echo "Unsupported configuration. Switching to no display";
    sed 's/displayenabled/false/g' /boot/config.yml;;
esac
   
# Selects the color of your e-ink display
case $pwncolor in
  "black")
    sed 's/colortype/black/g' /boot/config.yml;;
  "blue")
    sed 's/colortype/blue/g' /boot/config.yml;;
  "red")
    sed 's/colortype/red/g' /boot/config.yml;;
  "yellow")
    sed 's/colortype/yellow/g' /boot/config.yml;;
  *)
    echo "Unsupported configuration. Switching to default color";
    sed 's/colortype/black/g' /boot/config.yml;;
esac

# Selects the level of reporting to pwnagotchi servers
case $pwnreport in
  "none")
    sed 's/gridenabled/false/g' /boot/config.yml;;
    sed 's/gridreport/false/g' /boot/config.yml;;
  "partial")
    sed 's/gridenabled/true/g' /boot/config.yml;;
    sed 's/gridreport/false/g' /boot/config.yml;;
  "full")
    sed 's/gridenabled/true/g' /boot/config.yml;;
    sed 's/gridreport/true/g' /boot/config.yml;;
  *)
    echo "Unsupported configuration. Switching to default reporting";
    sed 's/gridenabled/false/g' /boot/config.yml;;
    sed 's/gridreport/false/g' /boot/config.yml;;
esac

# updates planet if there is an internet connection
if [ $updateplanet = "true" ] && [ "$(treehouses internet)" ]; then
  docker pull treehouses/planet:latest
  docker pull treehouses/planet:db-init
  docker tag treehouses/planet:latest treehouses/planet:local
  docker tag treehouses/planet:db-init treehouses/planet:db-init-local
fi

# removes treehouses team members sshkeys and places keys to .ssh folder
if [ $treehousesteamsshkeys = "false" ]; then
  treehouses sshkey deleteall
fi
if [[ ! -z $addauthorizedkey ]]; then
  treehouses sshkey add $addauthorizedkey
fi

# starts planet
if [ $startplanet = "true" ]; then
  {    
    echo "#!/bin/sh"
    echo
    echo "if [ \"$(treehouses container)\" = \"balena\" ]; then"
    echo "  export DOCKER_HOST=localhost:2375"
    echo "fi"
    echo "sleep 1"
    echo
    echo "if [ -f /srv/planet/pwd/credentials.yml ]; then"
    echo "  docker-compose -f /srv/planet/planet.yml -f /srv/planet/volumes.yml -f /srv/planet/pwd/credentials.yml -p planet up -d"
    echo "else"
    echo "  docker-compose -f /srv/planet/planet.yml -f /srv/planet/volumes.yml -p planet up -d"
    echo "fi"
  } > /boot/autorun

  mv /srv/tenalp /srv/planet
  sync;sync;sync

  docker-compose -f /srv/planet/planet.yml -f /srv/planet/volumes.yml -p planet up -d
fi

# starts coral environmental board demo
if [ "$startcoralenvirodemo" = "true" ] && [ -e /sys/bus/iio/devices/iio:device0 ]; then
  treehouses coralenv demo-always-on
fi

# boots to console if RPiZero or RPi3A+ (not enough RAM?)
case "$(treehouses detectrpi)" in
  RPIZW|RPI3A+)
    treehouses bootoption console;;
esac

if [ "$(treehouses rebootneeded)" = "true" ]; then
  reboot
fi
