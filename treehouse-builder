#!/bin/bash
# Download Raspbian Image, remove first-boot stuff, add repos and install packages.
#
# Open interactive Shell in chroot or write result to SD Card
#
# License: GNU General Public License, see http://www.gnu.org/copyleft/gpl.html for full text
#
# The following variables and arrays customize the behavior. To change them simply create a configuration
# file `pirateship-image-creator.config` which overrides them.
#
# Add at least the following lines to override the internal configuration:
# INSTALL_PACKAGES=()
# ADD_REPOS=()
# ADD_REPO_KEYS=()

# Raspbian
RASPBIAN_TORRENT_URL=https://downloads.raspberrypi.org/raspbian_latest.torrent
RASPBIAN_FILENAME=2017-04-10-raspbian-jessie.zip
RASPBIAN_SHA1=6d7b11bb3d64524203edf6c80c499456fb5fef53

############ End of User Cusomization

source lib.sh

missing_deps=()
for prog in kpartx aria2c wget gpg parted qemu-arm-static ; do
    if ! type $prog &>/dev/null ; then
        missing_deps+=( $prog )
    fi
done
if (( ${#missing_deps[@]} > 0 )) ; then
    die "Missing required programs: ${missing_deps[*]}
    On Debian/Ubuntu try 'sudo apt-get install kpartx qemu-user-static parted aria2'"
fi

function _umount {
    for dir in "$@" ; do
        if grep -q "$dir" /proc/self/mounts ; then
            if ! umount -f "$dir" ; then
                die "Could not umount $dir, check running procs:$NL$(lsof 2>/dev/null | grep $(readlink -f $dir))"
            fi
        fi
    done
}

function _get_image {
    echo "$(date) -- Fetching $RASPBIAN_TORRENT_URL"
    mkdir -p images
    RASPBIAN_ARCHIVE_FILE=images/$RASPBIAN_FILENAME
    wget --continue --progress=dot:giga --directory-prefix images $RASPBIAN_TORRENT_URL || die "Download of $RASPBIAN_TORRENT_URL failed"
    aria2c images/raspbian_latest.torrent -d images --seed-time=0
    echo "$(date) -- Download finished"
    echo -n "Checksum of "
    sha1sum --strict --check - <<<"$RASPBIAN_SHA1 *$RASPBIAN_ARCHIVE_FILE" || die "Download checksum validation failed, please check http://www.raspberrypi.org/downloads"
    unzip $RASPBIAN_ARCHIVE_FILE -d images || die "Could not unzip $RASPBIAN_ARCHIVE_FILE"
}

function _disable_daemons {
    # Prevent services from being started inside the chroot.
    POLICY_RC_D=mnt/img_root/usr/sbin/policy-rc.d
    echo "#!/bin/sh" >> $POLICY_RC_D
    echo "exit 101"  >> $POLICY_RC_D
    chmod +x $POLICY_RC_D
}

function _enable_daemons {
    POLICY_RC_D=mnt/img_root/usr/sbin/policy-rc.d
    rm -f $POLICY_RC_D
}

function _disable_ld_preload {
    cfg=mnt/img_root/etc/ld.so.preload

    if grep -q '^[^#]' $cfg; then
        sed -i -e 's/^/#/' $cfg || die "Could not disable ld.so.preload"
    fi
}

function _enable_ld_preload {
    cfg=mnt/img_root/etc/ld.so.preload

    if grep -q '^#' $cfg; then
        sed -i -e 's/^#//' $cfg || die "Could not enable ld.so.preload"
    fi
}

function _open_image {
    echo "Loop-back mounting" images/*.img
    kpartx="$(kpartx -sav images/*.img)" || die "Could not setup loop-back access to $RASPBIAN_ARCHIVE_FILE:$NL$kpartx"
    read -d '' img_boot_dev img_root_dev <<<$(grep -o 'loop.p.' <<<"$kpartx")
    test "$img_boot_dev" -a "$img_root_dev" || die "Could not extract boot and root loop device from kpartx output:$NL$kpartx"
    img_boot_dev=/dev/mapper/$img_boot_dev
    img_root_dev=/dev/mapper/$img_root_dev
    mkdir -p mnt/img_root
    mount -t ext4 $img_root_dev mnt/img_root || die "Could not mount $img_root_dev mnt/img_root"
    mkdir -p mnt/img_root/boot || die "Could not mkdir mnt/img_root/boot"
    mount -t vfat $img_boot_dev mnt/img_root/boot || die "Could not mount $img_boot_dev mnt/img_root/boot"
    echo "Raspbian Image Details:"
    df -h mnt/img_root/boot mnt/img_root | sed -e "s#$(pwd)/##"
}

function _close_image {
    _umount mnt/img_root/var/cache/apt/archives \
        mnt/img_root/{proc,sys,run,dev/pts} \
        mnt/sd_root/bo?t mnt/img_root/boot \
        mnt/sd_ro?t mnt/img_root
    kpartx -d images/*.img >/dev/null
}

function _prepare_chroot {
    _disable_ld_preload

    cp -a "$(type -p qemu-arm-static)" mnt/img_root/usr/bin/ || die "Could not copy qemu-arm-static"
    _chroot date &>/dev/null || die "Could not chroot date"

    mount -t devpts devpts -o noexec,nosuid,gid=5,mode=620 mnt/img_root/dev/pts || die "Could not mount /dev/pts"
    mount -t proc proc mnt/img_root/proc || die "Could not mount /proc"
    mount -t tmpfs -o mode=1777 none mnt/img_root/run || "Could not mount /run"

    mkdir -p apt_cache
    mount --bind apt_cache mnt/img_root/var/cache/apt/archives
}

function _cleanup_chroot {
    _umount mnt/img_root/var/cache/apt/archives \
        mnt/img_root/{proc,sys,run,dev/pts}
    _enable_daemons
    _enable_ld_preload
}

function _modify_image {
    echo "Modifying Image"

    _prepare_chroot
    _disable_daemons

    run-parts --exit-on-error -v --regex '[a-zA-Z.-_]*' scripts.d ||\
        die "Image modification scripts failed"

    _enable_daemons
    _cleanup_chroot
}

function _create_sdcard {
    # putting it all onto SD card
    DEST_DEVICE="$1"
    test -b "$DEST_DEVICE" || die "Must give block device with SD Card as first parameter"

    echo "Preparing SD card in $DEST_DEVICE"
    umount -f ${DEST_DEVICE}* &>/dev/null || :
    dd if=/dev/zero of=$DEST_DEVICE bs=1M count=100 status=none || die "Could not wipe SD card in $DEST_DEVICE"
    parted -a minimal -s $DEST_DEVICE mklabel msdos mkpart primary fat32 0mb 64mb mkpart primary ext2 64mb 100% set 1 boot on || die "Could not parted $DEST_DEVICE"
    if [ -e ${DEST_DEVICE}p1 ] ; then sd_boot_dev=${DEST_DEVICE}p1 ; elif [ -e ${DEST_DEVICE}1 ] ; then sd_boot_dev=${DEST_DEVICE}1 ; else die "Could not find sd-card partition 1" ; fi
    if [ -e ${DEST_DEVICE}p2 ] ; then sd_root_dev=${DEST_DEVICE}p2 ; elif [ -e ${DEST_DEVICE}2 ] ; then sd_root_dev=${DEST_DEVICE}2 ; else die "Could not find sd-card partition 2" ; fi
    mkdir -p mnt/sd_boot mnt/sd_root
    mkfs.vfat >/dev/null -n RASPBIAN_BOOT -F 32 $sd_boot_dev -m - <<<"This is the boot partition of a Raspbian image intended for a Raspberry Pi" || die "Could not create boot partition"
    mkfs.ext4 -q -L raspbian_root -E discard $sd_root_dev || die "Could not create root partition"
    tune2fs >/dev/null $sd_root_dev -o journal_data,discard || die "Could not tune2fs $sd_root_dev"
    mount -o data=writeback,nobarrier -t ext4 $sd_root_dev mnt/sd_root || die "Could not mount $sd_boot_dev mnt/sd_boot"
    mkdir -p mnt/sd_root/boot || die "Could not mkdir boot"
    mount -t vfat $sd_boot_dev mnt/sd_root/boot || die "Could not mount $sd_boot_dev mnt/sd_root/boot"

    echo "Copying files to SD card."
    cp -a mnt/img_root/* mnt/sd_root/ || die "Could not copy root fs"

    echo "SD Card Details:"
    _op parted -s $DEST_DEVICE print
    df -h mnt/sd_root/boot mnt/sd_root | sed -e "s#$(pwd)/##"

    echo
    echo "SD Card Creation finished, please wait for script to complete."
}

export LANG="C" LANGUAGE="C" LC_ALL="C.UTF-8"
shopt -s nullglob

DESTDEVICE=
if [[ -b "${1:-}" ]] ; then
    DESTDEVICE="$1"
fi

if [[ $# -eq 0 || "$*" == *-h* ]] ; then
    echo "
Usage: $0 <--chroot|/dev/mmcblk0>

Download Raspbian Image, remove first-boot stuff, add repos and install packages.

Open interactive Shell in chroot or write result to SD Card

License: GNU General Public License, see http://www.gnu.org/copyleft/gpl.html for full text
"
    exit 1
fi

if [[ "$USER" != root && $(id -u) != "0" ]] ; then
    # restart as root
    echo "Switching over to run as root"
    exec sudo "$(readlink -f "$0")" "$@"
    echo "Need sudo permission to run as root!"
    exit 1
fi

if grep -wq $(readlink -f mnt) /proc/self/mounts; then
    die "mnt/ is already mounted!"
fi

rm -Rf --one-file-system mnt temp
function exittrap {
    set +u +e
    _close_image
    echo "Script execution time: $SECONDS seconds"
}
trap exittrap 0
trap exittrap ERR


_get_image
_open_image
_modify_image

if [[ "$DESTDEVICE" ]] ; then
    _create_sdcard "$DESTDEVICE"
elif [[ "$1" == "--chroot" ]] ; then
    echo "Starting interactive Shell in image chroot"
    chroot mnt/img_root bash -i
    exit 0
elif [[ "$1" == "--noninteractive" ]] ; then
    :
else
    die "Usage error. Try $0 --help"
fi


# vim:autoindent:tabstop=2:shiftwidth=2:expandtab:softtabstop=2:
